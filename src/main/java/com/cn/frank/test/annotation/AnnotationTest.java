package com.cn.frank.test.annotation;

import com.alibaba.fastjson.JSON;
import com.cn.frank.test.bean.DishItem;
import com.cn.frank.test.util.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

import java.util.ArrayList;
import java.util.List;

/**
 * Author: frank_du
 * Time : 2017/4/5 下午7:41
 */
public class AnnotationTest {

    public static void main(String args[]) {
//        System.out.println(ResponseCode.displayValue(ResponseCode.class, ResponseCode.FAILURE));
//
//        String s = "com.dudet.test.sss";
//
//        String t = s.replaceAll("\\.","/");
//        System.out.println(t);

        System.out.println(System.currentTimeMillis());

        List<String> codes = new ArrayList<>();
        codes.add("java");
        codes.add("python");
        codes.add("go");
        System.out.println(JSON.toJSONString(codes));

    }

    private static void testListJson() {
        List<String> dishNames = new ArrayList<>();
        dishNames.add("宫保鸡丁");
        dishNames.add("鱼香肉丝");
        dishNames.add("糖醋排骨");
        String dishNamesStr = JSON.toJSONString(dishNames);
        System.out.println(dishNamesStr);


        List<String> dishNameList = JSON.parseArray(dishNamesStr, String.class);
        dishNameList.stream().forEach(value -> System.out.println(value));
    }

    private static void splitShopIds() {
        String target
        String test = "2018103100077000000065401164";
        int size = test.length();
        int totalLength = target.length();
        System.out.println("size = " + size + ", totalLength =" + totalLength);
        List<String> result = new ArrayList<>();
        for (int i = 0; i < totalLength/size; i++) {
            String subStr = target.substring(i * size , (i+1) * size);
            result.add(subStr);
        }
        String sss = CollectionUtils.join(result, ",");

        System.out.println(sss);
    }
}
